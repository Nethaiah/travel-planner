// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  trips         Trip[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Trip {
  id             String         @id @default(cuid())
  title          String
  description    String?
  destination    String
  startDate      DateTime
  endDate        DateTime
  budget         Float?
  coverImage     String?
  images         Trip_Image[]
  itinerary_days ItineraryDay[]
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  lat            Float? // Latitude
  lon            Float? // Longitude
  placeId        String? // LocationIQ place_id
  osmId          String? // OSM id
  osmType        String? // OSM type
  class          String? // LocationIQ class
  type           String? // LocationIQ type
  importance     Float? // LocationIQ importance
  icon           String? // LocationIQ icon URL
  displayName    String? // LocationIQ display_name
  addressJson    Json? // Full address object (optional)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("trip")
}

model Trip_Image {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  order     Int      @default(0)
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("trip_image")
}

model ItineraryDay {
  id         String   @id @default(cuid())
  tripId     String
  day_number Int
  date       DateTime
  title      String

  trip       Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  activities Activity[]

  @@map("itinerary_day")
}

enum ActivityCategory {
  activity
  accommodation
  food
  transport
  other
}

model Activity {
  id          String           @id @default(cuid())
  dayId       String
  title       String
  description String?
  category    ActivityCategory
  location    String?
  startTime   String?
  endTime     String?
  cost        Float?

  day ItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@map("activity")
}
